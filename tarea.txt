## 2. Enunciado

Imaginemos que una empresa agrícola necesita un **software de gestión de cultivos**. El objetivo es mantener un registro de los cultivos, parcelas, y actividades de mantenimiento. Al iniciar el programa, se leerá un archivo CSV (`cultivos.csv`) que representa el estado inicial del sistema. Al finalizar, todos los cambios se guardarán nuevamente en el mismo archivo.

### 2.1 Requerimientos funcionales

El programa debe:

1. Iniciarse desde la consola con:  

   "java App2 cultivos.csv"

   donde App2.java es la clase principal y cultivos.csv el archivo de persistencia.

2. Presentar un menú principal en consola, que permita acceder a las siguientes funciones:

   - **Gestión de Cultivos**
     - Listar cultivos existentes.
     - Crear un nuevo cultivo.
     - Eliminar un cultivo (solo si no tiene actividades pendientes).
     - Editar la información básica de un cultivo (nombre, variedad, fecha de siembra, etc.).

   - **Gestión de Parcelas**
     - Listar parcelas con sus cultivos.
     - Agregar una parcela.
     - Eliminar una parcela (solo si no tiene cultivos activos).
     - Editar una parcela (cambiar tamaño, ubicación, etc.).
     - Asignar un cultivo a una parcela.

   - **Gestión de Actividades**
     - Registrar actividad (riego, fertilización, cosecha, etc.) para un cultivo.
     - Listar actividades por cultivo.
     - Eliminar actividad.
     - Marcar actividad como completada.

   - **Búsqueda/Reporte**
     - Buscar cultivos por nombre o variedad (mostrar datos relevantes).
     - Reporte de cultivos activos, cosechados, o en riesgo.

   - **Salir**
     - Guardar toda la información en cultivos.csv y finalizar el programa.

### 2.2 Supuestos y detalles

- Cada parcela puede tener múltiples cultivos.
- Al menos una clase abstracta o interfaz debe emplearse para representar algún concepto genérico (por ejemplo, "ElementoAgrícola" que represente algo con nombre, fecha y estado).
- Se sugiere utilizar colecciones de Java (ArrayList, HashMap, List, etc.) para administrar cultivos, parcelas, actividades, etc.
- El usuario ingresa "información válida" (no se requiere validación exhaustiva).
- No hay campos vacíos en el CSV al iniciar.
- Se evaluará el uso de herencia, encapsulamiento y paquetes para organizar las clases (por ejemplo, un paquete models, otro services, etc.).

### 2.3 Formato del CSV

El formato del CSV será sencillo y consistente, todas las líneas tendrán la misma estructura:


Cultivo,"Maíz","Variedad Dulce",32.5,"PARCELA-A01","2023-03-01","ACTIVO",["RIEGO:2023-03-10","FERTILIZACION:2023-03-20"]
Cultivo,"Trigo","Variedad Premium",45.2,"PARCELA-B03","2023-02-15","ACTIVO",["RIEGO:2023-02-25","COSECHA:2023-06-15"]
Cultivo,"Tomate","Cherry",10.0,"PARCELA-C02","2023-04-05","EN_RIESGO",["FUMIGACION:2023-04-20"]
Cultivo,"Lechuga","Romana",8.5,"PARCELA-A02","2023-03-10","COSECHADO",["RIEGO:2023-03-20","COSECHA:2023-05-01"]


Cada línea contiene:
- Tipo de registro (siempre "Cultivo")
- Nombre del cultivo
- Variedad
- Superficie (hectáreas)
- Código de parcela
- Fecha de siembra
- Estado (ACTIVO, EN_RIESGO, COSECHADO)
- Lista de actividades con fechas (formato JSON simple)

## 3. Nuevos Requerimientos y Detalles de la Entrega

- **Lenguaje**: Java (versión 16 o superior, u OpenJDK 16+).
- **Grupos**: 4 o 5 personas (no se admitirán grupos de 6).
- **Fecha de entrega**: Sábado 3 de Mayo a las 23:59.
- Por cada día de atraso se descuenta 1 punto, comenzando a las 00:00 del día siguiente.
  - Ejemplo: si entregan a las 00:00 del día siguiente, la nota máxima es 6.0.

Se evaluará en particular el uso correcto de:

- Paquetes (organizar las clases en paquetes coherentes).
- Modificadores de Acceso (privado, público, protegido) y encapsulamiento.
- Herencia (si se crea una superclase ElementoAgricola o un patrón similar).
- Colecciones (ArrayList, List, Map, etc.).
- Interfaces/Clases abstractas (al menos un uso sensato).

### Compilación y ejecución

- Desde la raíz del proyecto, se debe poder compilar (por ejemplo, javac App2.java u otro comando, dependiendo de la estructura).
- Luego, ejecutar:

  "java App2 cultivos.csv"

- El programa mostrará un menú que permita realizar las acciones mencionadas (crear cultivo, registrar actividad, buscar, etc.).
- Al salir, se guardarán los cambios en cultivos.csv.
